---
description: Rules for the GUI and main application logic
globs: 
alwaysApply: false
---
# Guidelines

- **GUI Structure (`src/gui.py`)**
  - Use `tkinter` with `ttk` for a native look.
  - Organize widgets with a grid layout within a `ttk.Notebook` for tabs.
  - Main tab: Directory selection, processing options, status, file list, details, and actions.
  - Settings tab: Processing settings, AI models, organization rules.
  - About tab: Application information.

- **Threading**
  - Use threading for long-running tasks (scanning, organizing, report generation).
  - Utilize a `queue.Queue` for inter-thread communication.
  - Update GUI via the queue to avoid freezing.

- **Settings Management (`src/settings_manager.py`)**
  - Use `SettingsManager` to load/save user preferences.
  - Store settings in `settings.json` located in an OS-specific directory.
  - Windows: `%LOCALAPPDATA%\AIDocumentOrganizer`
  - macOS/Linux: `~/.config/AIDocumentOrganizer`
  - Default settings for batch size, delay, directories, theme, and organization rules.

- **File Handling**
  - `FileAnalyzer`: Scan and analyze files.
    - Batch processing with configurable batch size and delay.
    - Use thread pool for parallel processing.
    - Supported file extensions: `.csv`, `.xlsx`, `.html`, `.md`, `.txt`, `.docx`.
  - `FileOrganizer`: Organize files based on AI analysis.
    - Create category folders, summary files, metadata files.
    - Copy or move files.
  - `FileParser`: Extract text and metadata.
    - Handle various file types (CSV, Excel, HTML, Markdown, Text, Word).
    - Use appropriate libraries (pandas, BeautifulSoup, docx, chardet).

- **Logging**
  - Use the `logging` module for all events (INFO, WARNING, ERROR).
  - Log to a file (`app.log`) and the console.
  - Windows-specific log directory: `%LOCALAPPDATA%\AIDocumentOrganizer`
  - macOS/Linux: `~/.local/share/AIDocumentOrganizer`
  - Fallback: Current directory if specific location fails.

- **Error Handling**
  - Handle exceptions gracefully.
  - Display user-friendly error messages via `messagebox`.
  - Log errors with details.

- **Progress Updates**
  - Update progress via a callback mechanism.
  - Display real-time progress: processed files, total files, batch status, percentage.
  - Use a `ttk.Progressbar`.

- **Main Entry Point (`main.py`)**
  - Set up logging.
  - Handle DPI awareness on Windows.
  - Create the main window and initialize `DocumentOrganizerApp`.
  - Set application icon (Windows specific).
  - Set window size and position (80% of screen).
  - Set Windows-specific theme (`winnative`, `vista`, `clam`).

- **Organization Rules**
  - Configurable via settings:
    - Create category folders.
    - Generate content summaries.
    - Include metadata files.
    - Copy files instead of moving.