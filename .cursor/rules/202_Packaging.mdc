---
description: Rules for packaging and distribution
globs: packaging/*
alwaysApply: false
---
# Guidelines

- **Packaging**
  - Support creating a Windows executable using PyInstaller.
  - Provide `ai_document_organizer.spec` for PyInstaller configuration.
  - Include `version_info.txt` for version information.
  - Offer a `build_exe.py` script for a more controlled build process.
  - Use a batch file (`build.bat`) for convenience.
  - Create an NSIS installer script (`installer.nsi`) for distribution.
 - Optional: Include instructions for packaging with cx_Freeze, including an MSI installer.

- **PyInstaller Configuration**
  - Use `--onedir` mode.
  - Hide the console window (`--windowed`).
  - Specify application name and icon.
  - Add data files (icon, docs).
  - Specify hidden imports (e.g., `google.generativeai`, `openai`, `pandas`, `openpyxl`).

- **cx_Freeze Configuration**
  - Create a setup script (setup_cx_freeze.py) for defining build options and executable.
  - Handle packages, excludes, include_files.
  - Set `include_msvcr` to `True` for DLL issues.

- **Build Script (`build_exe.py`)**
  - Clean previous builds (`dist`, `build` directories).
  - Run PyInstaller with specific options.
  - Verify executable creation.
  - Provide error handling.

- **NSIS Installer Script (`installer.nsi`)**
  - Compile to create an installer executable.
  - Include the built application and necessary files.
  - Handle installation paths and uninstallation.
  - Include the LICENSE.txt file in the docs directory.

- **Troubleshooting**
    - Address missing DLLs or modules by adding them to the appropriate configuration (e.g., `build.bat`, `build_exe.py`, `setup_cx_freeze.py`).
    - Ensure that all required files and folders are present (assets, docs).